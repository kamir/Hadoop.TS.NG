/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.opentsx.data.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Episodes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8240721030908068743L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Episodes\",\"namespace\":\"org.opentsx.data.model\",\"fields\":[{\"name\":\"taglabel\",\"type\":\"string\",\"default\":\"-\"},{\"name\":\"tStart\",\"type\":\"long\",\"default\":0},{\"name\":\"tEnd\",\"type\":\"long\",\"default\":1000},{\"name\":\"zObservations\",\"type\":\"long\",\"default\":1},{\"name\":\"increment\",\"type\":\"int\",\"doc\":\"Time increment in ms.\",\"default\":1000},{\"name\":\"uri\",\"type\":\"string\",\"default\":\"-\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Episodes> ENCODER =
      new BinaryMessageEncoder<Episodes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Episodes> DECODER =
      new BinaryMessageDecoder<Episodes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Episodes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Episodes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Episodes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Episodes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Episodes from a ByteBuffer. */
  public static Episodes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence taglabel;
   private long tStart;
   private long tEnd;
   private long zObservations;
  /** Time increment in ms. */
   private int increment;
   private java.lang.CharSequence uri;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Episodes() {}

  /**
   * All-args constructor.
   * @param taglabel The new value for taglabel
   * @param tStart The new value for tStart
   * @param tEnd The new value for tEnd
   * @param zObservations The new value for zObservations
   * @param increment Time increment in ms.
   * @param uri The new value for uri
   */
  public Episodes(java.lang.CharSequence taglabel, java.lang.Long tStart, java.lang.Long tEnd, java.lang.Long zObservations, java.lang.Integer increment, java.lang.CharSequence uri) {
    this.taglabel = taglabel;
    this.tStart = tStart;
    this.tEnd = tEnd;
    this.zObservations = zObservations;
    this.increment = increment;
    this.uri = uri;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taglabel;
    case 1: return tStart;
    case 2: return tEnd;
    case 3: return zObservations;
    case 4: return increment;
    case 5: return uri;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taglabel = (java.lang.CharSequence)value$; break;
    case 1: tStart = (java.lang.Long)value$; break;
    case 2: tEnd = (java.lang.Long)value$; break;
    case 3: zObservations = (java.lang.Long)value$; break;
    case 4: increment = (java.lang.Integer)value$; break;
    case 5: uri = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'taglabel' field.
   * @return The value of the 'taglabel' field.
   */
  public java.lang.CharSequence getTaglabel() {
    return taglabel;
  }

  /**
   * Sets the value of the 'taglabel' field.
   * @param value the value to set.
   */
  public void setTaglabel(java.lang.CharSequence value) {
    this.taglabel = value;
  }

  /**
   * Gets the value of the 'tStart' field.
   * @return The value of the 'tStart' field.
   */
  public java.lang.Long getTStart() {
    return tStart;
  }

  /**
   * Sets the value of the 'tStart' field.
   * @param value the value to set.
   */
  public void setTStart(java.lang.Long value) {
    this.tStart = value;
  }

  /**
   * Gets the value of the 'tEnd' field.
   * @return The value of the 'tEnd' field.
   */
  public java.lang.Long getTEnd() {
    return tEnd;
  }

  /**
   * Sets the value of the 'tEnd' field.
   * @param value the value to set.
   */
  public void setTEnd(java.lang.Long value) {
    this.tEnd = value;
  }

  /**
   * Gets the value of the 'zObservations' field.
   * @return The value of the 'zObservations' field.
   */
  public java.lang.Long getZObservations() {
    return zObservations;
  }

  /**
   * Sets the value of the 'zObservations' field.
   * @param value the value to set.
   */
  public void setZObservations(java.lang.Long value) {
    this.zObservations = value;
  }

  /**
   * Gets the value of the 'increment' field.
   * @return Time increment in ms.
   */
  public java.lang.Integer getIncrement() {
    return increment;
  }

  /**
   * Sets the value of the 'increment' field.
   * Time increment in ms.
   * @param value the value to set.
   */
  public void setIncrement(java.lang.Integer value) {
    this.increment = value;
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }

  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Creates a new Episodes RecordBuilder.
   * @return A new Episodes RecordBuilder
   */
  public static org.opentsx.data.model.Episodes.Builder newBuilder() {
    return new org.opentsx.data.model.Episodes.Builder();
  }

  /**
   * Creates a new Episodes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Episodes RecordBuilder
   */
  public static org.opentsx.data.model.Episodes.Builder newBuilder(org.opentsx.data.model.Episodes.Builder other) {
    return new org.opentsx.data.model.Episodes.Builder(other);
  }

  /**
   * Creates a new Episodes RecordBuilder by copying an existing Episodes instance.
   * @param other The existing instance to copy.
   * @return A new Episodes RecordBuilder
   */
  public static org.opentsx.data.model.Episodes.Builder newBuilder(org.opentsx.data.model.Episodes other) {
    return new org.opentsx.data.model.Episodes.Builder(other);
  }

  /**
   * RecordBuilder for Episodes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Episodes>
    implements org.apache.avro.data.RecordBuilder<Episodes> {

    private java.lang.CharSequence taglabel;
    private long tStart;
    private long tEnd;
    private long zObservations;
    /** Time increment in ms. */
    private int increment;
    private java.lang.CharSequence uri;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.opentsx.data.model.Episodes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taglabel)) {
        this.taglabel = data().deepCopy(fields()[0].schema(), other.taglabel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tStart)) {
        this.tStart = data().deepCopy(fields()[1].schema(), other.tStart);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tEnd)) {
        this.tEnd = data().deepCopy(fields()[2].schema(), other.tEnd);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.zObservations)) {
        this.zObservations = data().deepCopy(fields()[3].schema(), other.zObservations);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.increment)) {
        this.increment = data().deepCopy(fields()[4].schema(), other.increment);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.uri)) {
        this.uri = data().deepCopy(fields()[5].schema(), other.uri);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Episodes instance
     * @param other The existing instance to copy.
     */
    private Builder(org.opentsx.data.model.Episodes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.taglabel)) {
        this.taglabel = data().deepCopy(fields()[0].schema(), other.taglabel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tStart)) {
        this.tStart = data().deepCopy(fields()[1].schema(), other.tStart);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tEnd)) {
        this.tEnd = data().deepCopy(fields()[2].schema(), other.tEnd);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.zObservations)) {
        this.zObservations = data().deepCopy(fields()[3].schema(), other.zObservations);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.increment)) {
        this.increment = data().deepCopy(fields()[4].schema(), other.increment);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.uri)) {
        this.uri = data().deepCopy(fields()[5].schema(), other.uri);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'taglabel' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaglabel() {
      return taglabel;
    }

    /**
      * Sets the value of the 'taglabel' field.
      * @param value The value of 'taglabel'.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder setTaglabel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.taglabel = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taglabel' field has been set.
      * @return True if the 'taglabel' field has been set, false otherwise.
      */
    public boolean hasTaglabel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taglabel' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder clearTaglabel() {
      taglabel = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tStart' field.
      * @return The value.
      */
    public java.lang.Long getTStart() {
      return tStart;
    }

    /**
      * Sets the value of the 'tStart' field.
      * @param value The value of 'tStart'.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder setTStart(long value) {
      validate(fields()[1], value);
      this.tStart = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tStart' field has been set.
      * @return True if the 'tStart' field has been set, false otherwise.
      */
    public boolean hasTStart() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tStart' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder clearTStart() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tEnd' field.
      * @return The value.
      */
    public java.lang.Long getTEnd() {
      return tEnd;
    }

    /**
      * Sets the value of the 'tEnd' field.
      * @param value The value of 'tEnd'.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder setTEnd(long value) {
      validate(fields()[2], value);
      this.tEnd = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tEnd' field has been set.
      * @return True if the 'tEnd' field has been set, false otherwise.
      */
    public boolean hasTEnd() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tEnd' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder clearTEnd() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'zObservations' field.
      * @return The value.
      */
    public java.lang.Long getZObservations() {
      return zObservations;
    }

    /**
      * Sets the value of the 'zObservations' field.
      * @param value The value of 'zObservations'.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder setZObservations(long value) {
      validate(fields()[3], value);
      this.zObservations = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'zObservations' field has been set.
      * @return True if the 'zObservations' field has been set, false otherwise.
      */
    public boolean hasZObservations() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'zObservations' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder clearZObservations() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'increment' field.
      * Time increment in ms.
      * @return The value.
      */
    public java.lang.Integer getIncrement() {
      return increment;
    }

    /**
      * Sets the value of the 'increment' field.
      * Time increment in ms.
      * @param value The value of 'increment'.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder setIncrement(int value) {
      validate(fields()[4], value);
      this.increment = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'increment' field has been set.
      * Time increment in ms.
      * @return True if the 'increment' field has been set, false otherwise.
      */
    public boolean hasIncrement() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'increment' field.
      * Time increment in ms.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder clearIncrement() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }

    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.uri = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Episodes.Builder clearUri() {
      uri = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Episodes build() {
      try {
        Episodes record = new Episodes();
        record.taglabel = fieldSetFlags()[0] ? this.taglabel : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tStart = fieldSetFlags()[1] ? this.tStart : (java.lang.Long) defaultValue(fields()[1]);
        record.tEnd = fieldSetFlags()[2] ? this.tEnd : (java.lang.Long) defaultValue(fields()[2]);
        record.zObservations = fieldSetFlags()[3] ? this.zObservations : (java.lang.Long) defaultValue(fields()[3]);
        record.increment = fieldSetFlags()[4] ? this.increment : (java.lang.Integer) defaultValue(fields()[4]);
        record.uri = fieldSetFlags()[5] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Episodes>
    WRITER$ = (org.apache.avro.io.DatumWriter<Episodes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Episodes>
    READER$ = (org.apache.avro.io.DatumReader<Episodes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
